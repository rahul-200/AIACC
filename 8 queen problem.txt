import heapq
N = 8
def is_safe(board, row, col):
    for x in range(col):
        if board[row][x] == 1:
            return False
    for x, y in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[x][y] == 1:
            return False
    for x, y in zip(range(row, N, 1), range(col, -1, -1)):
        if board[x][y] == 1:
            return False
    return True
def count_conflicts(board, col):
    conflicts = 0
    for i in range(N):
        if board[i][col] == 1:
            for j in range(N):
                if j != col and board[i][j] == 1:
                    conflicts += 1
                if i != j and abs(i - j) == abs(col - j) and board[i][j] == 1:
                    conflicts += 1
    return conflicts // 2
def solve_n_queens():
    board = [[0 for _ in range(N)] for _ in range(N)]
    open_list = [(0, board, 0)]
    while open_list:
        _, current_board, col = heapq.heappop(open_list)
        if col == N:
            return current_board
        for i in range(N):
            if is_safe(current_board, i, col):
                new_board = [row[:] for row in current_board]
                new_board[i][col] = 1
                heapq.heappush(open_list, (count_conflicts(new_board, col), new_board, col + 1))
    return None
solution = solve_n_queens()
if solution:
    for row in solution:
        print(row)
else:
    print("No solution found")